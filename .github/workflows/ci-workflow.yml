name: CI/CD for compromise-for-t2.micro

on:
  push:
    branches:
      - compromise-for-t2.micro  # 해당 브랜치에 푸쉬될 때 트리거

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2-1 application.yml 치환
      - name: Replace environment variables in application.yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yml
        env:
          spring.datasource.url: ${{ secrets.DATASOURCE_URL }}
          spring.datasource.username: ${{ secrets.DATASOURCE_USERNAME }}
          spring.datasource.password: ${{ secrets.DATASOURCE_PASSWORD }}
          my.app.secret-key: ${{ secrets.MY_APP_SECRET_KEY }}

      # 2-2. Gradle 빌드 수행
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew build -x test

      # 3. Docker 이미지 빌드
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/greaticker_backend:latest .

      # 4. Docker Hub 로그인
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 5. Docker 이미지 푸쉬
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/greaticker_backend:latest

  deploy:
    name: deploy
    needs: build
    runs-on: ubuntu-latest
    env:
      AWS_INSTANCE_SG_ID: ${{ secrets.SECURITY_GROUP_ID }}
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_FOR_CICD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_FOR_CICD_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: get runner ip address
        id: ip
        uses: haythem/public-ip@v1.2
      - name: whitelist runner ip address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}  # EC2 호스트
          username: ${{ secrets.EC2_USER }}  # EC2 사용자
          key: ${{ secrets.EC2_PRIVATE_KEY }}  # SSH 개인 키
          script: |
            cd ~  # EC2의 홈 폴더 경로
            docker-compose down
            docker image rm -f ${{ secrets.DOCKER_USERNAME }}/greaticker_backend:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/greaticker_backend:latest
            docker-compose up -d
      - name: revoke runner ip address
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
